//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "instruments")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub category: Option<String>,
    pub is_default: bool,
    pub created_at: String,
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::parts::Entity> for Entity {
    fn to() -> RelationDef {
        super::parts_instruments::Relation::Parts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::parts_instruments::Relation::Instruments.def().rev())
    }
}

impl Related<super::ensembles_parts::Entity> for Entity {
    fn to() -> RelationDef {
        super::ensemble_parts_instruments::Relation::EnsemblesParts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::ensemble_parts_instruments::Relation::Instruments
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
